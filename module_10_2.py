"""Создайте класс Knight, наследованный от Thread, объекты которого будут обладать следующими свойствами:
Атрибут name - имя рыцаря. (str)
Атрибут power - сила рыцаря. (int)
А также метод run, в котором рыцарь будет сражаться с врагами:
При запуске потока должна выводится надпись "<Имя рыцаря>, на нас напали!".
Рыцарь сражается до тех пор, пока не повергнет всех врагов (у всех потоков их 100).
В процессе сражения количество врагов уменьшается на power текущего рыцаря.
По прошествию 1 дня сражения (1 секунды) выводится строка "<Имя рыцаря> сражается <кол-во дней>..., осталось <кол-во воинов> воинов."
После победы над всеми врагами выводится надпись "<Имя рыцаря> одержал победу спустя <кол-во дней> дней(дня)!"
Как можно заметить нужно сделать задержку в 1 секунду, инструменты для задержки выберите сами.
Пункты задачи:
Создайте класс Knight с соответствующими описанию свойствами.
Создайте и запустите 2 потока на основе класса Knight.
Выведите на экран строку об окончании битв."""

import time  # Импортируем модуль time для использования функции задержки
from threading import Thread  # Импортируем класс Thread из модуля threading для создания потоков

class Knight(Thread):  # Определяем класс Knight, который наследует от Thread
    def __init__(self, name, power):  # Конструктор класса, принимающий имя и силу рыцаря
        super().__init__()  # Инициализируем родительский класс Thread
        self.name = name  # Устанавливаем имя рыцаря
        self.power = power  # Устанавливаем силу рыцаря
        self.enemies = 100  # Устанавливаем начальное количество врагов

    def run(self):  # Определяем метод, который будет выполняться в потоке
        print(f"{self.name}, на нас напали!")  # Выводим сообщение о начале сражения
        day = 1  # Инициализируем счетчик дней
        while self.enemies > 0:  # Пока есть враги
            self.enemies -= self.power  # Уменьшаем количество врагов на силу рыцаря
            time.sleep(1)  # Задержка на 1 секунду для имитации времени боя
            print(f"{self.name} сражается {day} день..., осталось {self.enemies} врагов.")  # Выводим информацию о ходе боя
            day += 1  # Увеличиваем счетчик дней на 1
        print(f"{self.name} одержал победу спустя {day - 1} дней!")  # Выводим сообщение о победе

# Создаем экземпляры рыцарей с именами и силами
knight1 = Knight("Arthur", 10)  # Рыцарь Артур с силой 10
knight2 = Knight("Lancelot", 15)  # Рыцарь Ланселот с силой 15

# Запускаем потоки для каждого рыцаря
knight1.start()  # Запуск потока для рыцаря Артура
knight2.start()  # Запуск потока для рыцаря Ланселота

# Ожидаем завершения обоих потоков
knight1.join()  # Ожидание завершения потока Артура
knight2.join()  # Ожидание завершения потока Ланселота

print("Все враги повержены!")  # Выводим сообщение о том, что все враги были побеждены